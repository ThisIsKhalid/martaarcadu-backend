// datasource and generator setup
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------

enum UserRole {
  USER
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model User {
  id     String @id @default(cuid())
  userId String @unique

  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      UserRole @default(USER)

  otp          String?
  otpExpiresAt DateTime?
  isVerified   Boolean   @default(false)

  isAgreedToTermsCondition Boolean @default(false)

  isPersonalClinicalIdentificationData Boolean @default(false)
  isDigestiveHistoryBackgroundData     Boolean @default(false)
  isDietSensitivitiesHabitsData        Boolean @default(false)
  isGoalMotivationConsentData          Boolean @default(false)

  isPartner Boolean @default(false)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  partner       Partner?
  healthProfile HealthProfile?
  carts         Cart[]
  appointments  Appointment[]

  @@map("users")
}

model Partner {
  id           String @id @default(cuid())
  profilePhoto String
  title        String

  pricePerConsultation Float
  availableDayStart    String
  availableDayEnd      String

  availableTime Json // [{ availableTimeStart, availableTimeEnd }]

  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@map("partners")
}

model HealthProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Anthropometric Parameters
  height Float? // in cm
  weight Float? // in kg
  bmi    Float?

  // Current Medical Conditions
  primaryDiagnosis String?
  diagnosisDate    DateTime?

  // Medications
  medications Medication[]

  // Gastrointestinal History
  giHistory GIHistory?

  // Nutrition Profile
  nutritionProfile NutritionProfile?

  // Goals and Motivation
  goalsMotivation GoalsMotivation?

  @@map("health_profiles")
}

model Medication {
  id        String        @id @default(cuid())
  profile   HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  name      String
  dosage    String
  frequency String
  startDate DateTime?

  @@map("medications")
}

model GIHistory {
  id        String        @id @default(cuid())
  profile   HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String        @unique

  // gi clinical history
  pastIssues        String? // acid reflux, constipation, diarrhea, etc.
  onsetDate         DateTime?
  treatmentReceived String? // antacids, PPIs, etc.

  // Family History
  familyConditions        String? // ulcerative colitis, crohn's disease, etc.
  otherRelevantConditions String? // e.g. diabetes, hypertension
  relationshipDegree      String? // e.g. "mother", "father", "sibling"

  // Surgeries
  surgeryType    String? // e.g. "appendectomy", "cholecystectomy"
  surgeryOutcome String? // e.g. "successful", "complications"
  surgeryDate    DateTime?

  // Bowel Function
  bowelMovementFreq String? // e.g. "daily", "twice weekly"
  bristolStoolScale Int? // 1-7

  // Symptoms (0-10 scale)
  bloating            Int?
  gas                 Int?
  abdominalPain       Int?
  digestiveDifficulty Int?

  // Food Sensitivities
  diagonesedIntolerances String? // e.g. lactose, gluten
  certifiedAllergies     String? // e.g. peanuts, shellfish, none
  testsPerformed         String? // e.g. skin prick, blood test

  @@map("gi_histories")
}

enum DIET_TYPE {
  Omnivore
  Vegetarian
  Vegan
  Other
}

model NutritionProfile {
  id        String        @id @default(cuid())
  profile   HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String        @unique

  dietType      DIET_TYPE?
  otherDietType String? // if dietType is Other

  // weekly consumption (portions)
  vegetables     Int? // e.g. 5
  animalProteins Int? // e.g. 3
  fruits         Int? // e.g. 7
  plantProteins  Int? // e.g. 2
  wholeGrains    Int? // e.g. 4
  dairyProducts  Int? // e.g. 2
  fermentedFoods Int? // e.g. 3

  // hydration & alcohol
  water   Int? // e.g. L/day ex: 2L
  alcohol Int? // e.g. units/week ex: 7 units

  // meal timing
  breakfastTime String? // e.g. "8:00 AM"
  lunchTime     String? // e.g. "12:00 PM"
  dinnerTime    String? // e.g. "7:00 PM"
  snackTime     String? // e.g. "3:00 PM" 

  // lifestyle
  physicalActivityType      String? // e.g. "running", "yoga"
  physicalActivityFrequency Int? // e.g. 5 times a week
  physicalActivityDuration  Int? // e.g. 30 minutes

  sleepDuration       Int? // e.g. 7 hours
  sleepQuality        Int? // e.g. 1-10 scale
  specificSleepIssues String? // e.g. insomnia, sleep apnea

  stressLevel   Int? // e.g. 1-10 scale
  smokingStatus Boolean? // e.g. true/false
  smokingAmount Int? // e.g. 5 cigarettes/day

  // current therapies
  antibioticsName         String? // e.g. "amoxicillin"
  isRecentlyOnAntibiotics Boolean? // e.g. true/false
  antibioticsEndDate      DateTime? // e.g. "2023-01-01"

  // supplements
  probioticsName     String? // e.g. "Lactobacillus"
  probioticsMinerals String? // e.g. "zinc, magnesium"
  prebioticsName     String? // e.g. "inulin"
  vitaminsName       String? // e.g. "vitamin D, vitamin C"
  otherSupplements   String? // e.g. "fish oil, turmeric"

  @@map("nutrition_profiles")
}

model GoalsMotivation {
  id        String        @id @default(cuid())
  profile   HealthProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String        @unique

  // primary goal
  preventiveWellness     String?
  digestiveOptimization  String?
  weightManagement       String?
  sportsPerformance      String?
  stressBalance          String?
  postAntibioticRecovery String?
  immuneSupport          String?
  womensHealth           String?
  activeLongevity        String?
  cardiovascularHealth   String?
  skinHealth             String?
  urineryTractWellness   String?

  //secondary goal
  secondaryGoal        String[] // e.g. "weight loss, muscle gain"
  interventionPriority String? // e.g. high, medium, low
  dietary              String? // e.g. high, medium, low
  supplementation      String? // e.g. high, medium, low
  potentialObstacles   String[] // e.g. "time, cost, knowledge"
  supportNeeded        String[] // e.g. "motivation, accountability"

  notes                             String?
  isAuthorizeProcessingPersonalData Boolean? // e.g. true/false
  isConsentPersonalizedService      Boolean? // e.g. true/false
  isAcceptTermsAndConditions        Boolean? // e.g. true/false

  @@map("goals_motivations")
}

// ---------------------------------------------------------
model Product {
  id              String  @id @default(cuid())
  name            String
  price           Float
  discountedPrice Float?
  discount        Float?
  category        String
  description     String?
  imageUrl        String

  isVisible Boolean @default(true)
  totalSell Int     @default(0)
  carts     Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Blog {
  id        String    @id @default(cuid())
  title     String
  category  String
  content   String
  published DateTime?
  banner    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Cart {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int    @default(1)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Appointment {
  id        String            @id @default(cuid())
  partnerId String
  patientId String      // ---> userId
  date      DateTime
  timeSlot  String
  status    AppointmentStatus @default(PENDING)

  user    User    @relation(fields: [patientId], references: [id], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}
